{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/task.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"primeng/button\";\nimport * as i5 from \"primeng/avatar\";\nimport * as i6 from \"primeng/avatargroup\";\nimport * as i7 from \"primeng/checkbox\";\nimport * as i8 from \"primeng/menu\";\nimport * as i9 from \"primeng/ripple\";\nconst _c0 = [\"menu\"];\nfunction TaskListComponent_li_4_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵelement(1, \"i\", 19);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r1.comments);\n  }\n}\nfunction TaskListComponent_li_4_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵelement(1, \"i\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r1.attachments);\n  }\n}\nfunction TaskListComponent_li_4_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵelement(1, \"i\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.parseDate(task_r1.startDate));\n  }\n}\nfunction TaskListComponent_li_4_p_avatar_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-avatar\", 23);\n  }\n  if (rf & 2) {\n    const member_r11 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate1(\"image\", \"assets/demo/images/avatar/\", member_r11.image, \"\");\n  }\n}\nconst _c1 = function () {\n  return {\n    \"background-color\": \"#ffffff\",\n    \"color\": \"#212121\",\n    \"border\": \"2px solid var(--surface-border)\"\n  };\n};\nfunction TaskListComponent_li_4_p_avatar_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-avatar\", 24);\n  }\n  if (rf & 2) {\n    const task_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c1));\n    i0.ɵɵpropertyInterpolate1(\"label\", \"+ \", task_r1.members.length - 4, \"\");\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"line-through\": a0\n  };\n};\nfunction TaskListComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 3)(1, \"div\", 4)(2, \"p-checkbox\", 5);\n    i0.ɵɵlistener(\"onChange\", function TaskListComponent_li_4_Template_p_checkbox_onChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onCheckboxChange($event, task_r1));\n    })(\"ngModelChange\", function TaskListComponent_li_4_Template_p_checkbox_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const task_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(task_r1.completed = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 7)(6, \"div\", 8);\n    i0.ɵɵtemplate(7, TaskListComponent_li_4_span_7_Template, 3, 1, \"span\", 9);\n    i0.ɵɵtemplate(8, TaskListComponent_li_4_span_8_Template, 3, 1, \"span\", 9);\n    i0.ɵɵtemplate(9, TaskListComponent_li_4_span_9_Template, 3, 1, \"span\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 11)(11, \"p-avatarGroup\", 12);\n    i0.ɵɵtemplate(12, TaskListComponent_li_4_p_avatar_12_Template, 1, 1, \"p-avatar\", 13);\n    i0.ɵɵpipe(13, \"slice\");\n    i0.ɵɵtemplate(14, TaskListComponent_li_4_p_avatar_14_Template, 1, 4, \"p-avatar\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_li_4_Template_button_click_15_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.toggleMenu($event, task_r1));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"p-menu\", 16, 17);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"binary\", true)(\"ngModel\", task_r1.completed)(\"inputId\", task_r1.id.toString());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(16, _c2, task_r1.completed));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r1.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", task_r1.comments);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r1.attachments);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r1.startDate);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(13, 12, task_r1.members, 0, 4));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", task_r1 && task_r1.members && task_r1.members.length > 4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"popup\", true)(\"model\", ctx_r0.menuItems);\n  }\n}\nexport class TaskListComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n    this.menuItems = [];\n  }\n  ngOnInit() {\n    this.menuItems = [{\n      label: 'Edit',\n      icon: 'pi pi-pencil',\n      command: () => this.onEdit()\n    }, {\n      label: 'Delete',\n      icon: 'pi pi-trash',\n      command: () => this.handleDelete()\n    }];\n  }\n  parseDate(date) {\n    let d = new Date(date);\n    return d.toUTCString().split(' ').slice(1, 3).join(' ');\n  }\n  handleDelete() {\n    this.taskService.removeTask(this.clickedTask.id);\n  }\n  toggleMenu(event, task) {\n    this.clickedTask = task;\n    this.menu.toggle(event);\n  }\n  onEdit() {\n    this.taskService.onTaskSelect(this.clickedTask);\n    this.taskService.showDialog('Edit Task', false);\n  }\n  onCheckboxChange(event, task) {\n    event.originalEvent.stopPropagation();\n    task.completed = event.checked;\n    this.taskService.markAsCompleted(task);\n  }\n}\nTaskListComponent.ɵfac = function TaskListComponent_Factory(t) {\n  return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService));\n};\nTaskListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskListComponent,\n  selectors: [[\"app-task-list\"]],\n  viewQuery: function TaskListComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menu = _t.first);\n    }\n  },\n  inputs: {\n    taskList: \"taskList\",\n    title: \"title\"\n  },\n  decls: 5,\n  vars: 2,\n  consts: [[1, \"text-900\", \"font-semibold\", \"text-lg\", \"mt-5\", \"mb-3\", \"border-bottom-1\", \"surface-border\", \"py-3\"], [1, \"list-none\", \"p-0\", \"m-0\"], [\"class\", \"flex flex-column gap-3 md:flex-row md:align-items-center p-2 border-bottom-1 surface-border\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"flex-column\", \"gap-3\", \"md:flex-row\", \"md:align-items-center\", \"p-2\", \"border-bottom-1\", \"surface-border\"], [1, \"flex\", \"align-items-center\", \"flex-1\"], [3, \"binary\", \"ngModel\", \"inputId\", \"onChange\", \"ngModelChange\"], [\"for\", \"task.id\", 1, \"font-medium\", \"ml-2\", 2, \"word-break\", \"break-word\", 3, \"ngClass\"], [1, \"flex\", \"flex-1\", \"gap-3\", \"flex-column\", \"sm:flex-row\", \"sm:justify-content-between\"], [1, \"flex\", \"align-items-center\"], [\"class\", \"flex align-items-center font-semibold mr-3\", 4, \"ngIf\"], [\"class\", \"flex align-items-center font-semibold white-space-nowrap\", 4, \"ngIf\"], [1, \"flex\", \"align-items-center\", \"sm:justify-content-end\"], [\"styleClass\", \"mr-3\"], [\"size\", \"large\", \"shape\", \"circle\", 3, \"image\", 4, \"ngFor\", \"ngForOf\"], [\"shape\", \"circle\", \"size\", \"large\", 3, \"label\", \"style\", 4, \"ngIf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-ellipsis-v\", 1, \"p-button-rounded\", \"p-button-text\", \"z-3\", \"ml-auto\", \"sm:ml-0\", 3, \"click\"], [\"styleClass\", \"w-8rem\", 3, \"popup\", \"model\"], [\"menu\", \"\"], [1, \"flex\", \"align-items-center\", \"font-semibold\", \"mr-3\"], [1, \"pi\", \"pi-comment\", \"mr-2\"], [1, \"pi\", \"pi-paperclip\", \"mr-2\"], [1, \"flex\", \"align-items-center\", \"font-semibold\", \"white-space-nowrap\"], [1, \"pi\", \"pi-clock\", \"mr-2\"], [\"size\", \"large\", \"shape\", \"circle\", 3, \"image\"], [\"shape\", \"circle\", \"size\", \"large\", 3, \"label\"]],\n  template: function TaskListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"ul\", 1);\n      i0.ɵɵtemplate(4, TaskListComponent_li_4_Template, 18, 18, \"li\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.taskList);\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.NgControlStatus, i3.NgModel, i4.ButtonDirective, i5.Avatar, i6.AvatarGroup, i7.Checkbox, i8.Menu, i9.Ripple, i2.SlicePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["i0","TaskListComponent","constructor","taskService","ngOnInit","menuItems","label","icon","command","onEdit","handleDelete","parseDate","date","d","Date","toUTCString","split","slice","join","removeTask","clickedTask","id","toggleMenu","event","task","menu","toggle","onTaskSelect","showDialog","onCheckboxChange","originalEvent","stopPropagation","completed","checked","markAsCompleted","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\UsuarioPrincipal\\Downloads\\verona-ng-15.0.1\\src\\app\\demo\\components\\apps\\tasklist\\task-list\\task-list.component.html","C:\\Users\\UsuarioPrincipal\\Downloads\\verona-ng-15.0.1\\src\\app\\demo\\components\\apps\\tasklist\\task-list\\task-list.component.ts"],"sourcesContent":["<div>\n    <div class=\"text-900 font-semibold text-lg mt-5 mb-3 border-bottom-1 surface-border py-3\">{{title}}</div>\n    <ul class=\"list-none p-0 m-0\">\n        <li *ngFor=\"let task of taskList\" class=\"flex flex-column gap-3 md:flex-row md:align-items-center p-2 border-bottom-1 surface-border\">\n            <div class=\"flex align-items-center flex-1\">\n                <p-checkbox [binary]=\"true\" (onChange)=\"onCheckboxChange($event, task)\" [(ngModel)]=\"task.completed\" [inputId]=\"task.id.toString()\"></p-checkbox>\n                <label for=\"task.id\" style=\"word-break: break-word;\" class=\"font-medium ml-2\" [ngClass]=\"{'line-through': task.completed}\">{{task.name}}</label>\n            </div>\n            <div class=\"flex flex-1 gap-3 flex-column sm:flex-row sm:justify-content-between\">\n                <div class=\"flex align-items-center\">\n                    <span *ngIf=\"task.comments\" class=\"flex align-items-center font-semibold mr-3\"><i class=\"pi pi-comment mr-2\"></i>{{task.comments}}</span>\n                    <span *ngIf=\"task.attachments\" class=\"flex align-items-center font-semibold mr-3\"><i class=\"pi pi-paperclip mr-2\"></i>{{task.attachments}}</span>\n                    <span class=\"flex align-items-center font-semibold white-space-nowrap\" *ngIf=\"task.startDate\"><i class=\"pi pi-clock mr-2\"></i>{{parseDate(task.startDate)}}</span>\n                </div>\n                <div class=\"flex align-items-center sm:justify-content-end\">\n                    <p-avatarGroup styleClass=\"mr-3\">\n                        <p-avatar *ngFor=\"let member of task.members | slice:0:4\" image=\"assets/demo/images/avatar/{{member.image}}\" size=\"large\" shape=\"circle\"></p-avatar>\n                        <p-avatar *ngIf=\"task && task.members && task.members.length > 4\" label=\"+ {{task.members.length - 4}}\" shape=\"circle\" size=\"large\" [style]=\"{'background-color':'#ffffff', 'color': '#212121', 'border':'2px solid var(--surface-border)'}\"></p-avatar>\n                    </p-avatarGroup>\n                    <button pButton pRipple type=\"button\" icon=\"pi pi-ellipsis-v\" class=\"p-button-rounded p-button-text z-3 ml-auto sm:ml-0\" (click)=\"toggleMenu($event, task)\"></button>\n                    <p-menu #menu [popup]=\"true\" [model]=\"menuItems\" styleClass=\"w-8rem\"></p-menu>\n                </div>\n            </div>\n        </li>\n    </ul>\n</div>","import { Component, OnInit, Input, ViewChild, ChangeDetectionStrategy } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\nimport { Menu } from 'primeng/menu';\nimport { Task } from 'src/app/demo/api/task';\nimport { TaskService } from '../service/task.service';\n\n@Component({\n    selector: 'app-task-list',\n    templateUrl: './task-list.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListComponent implements OnInit {\n\n    @Input() taskList!: Task[];\n\n    @Input() title!: string;\n\n    @ViewChild('menu') menu!: Menu;\n\n    menuItems: MenuItem[] = [];\n\n    clickedTask!: Task;\n\n    constructor(private taskService: TaskService) { }\n\n    ngOnInit(): void {\n        this.menuItems = [\n            { label: 'Edit', icon: 'pi pi-pencil', command: () => this.onEdit() },\n            { label: 'Delete', icon: 'pi pi-trash', command: () => this.handleDelete() }\n        ];\n    }\n\n    parseDate(date: Date) {\n        let d = new Date(date);\n        return d.toUTCString().split(' ').slice(1, 3).join(' ');\n    }\n\n    handleDelete() {\n        this.taskService.removeTask(this.clickedTask.id);\n    }\n\n    toggleMenu(event: Event, task: Task) {\n        this.clickedTask = task;\n        this.menu.toggle(event);\n    }\n\n    onEdit() {\n        this.taskService.onTaskSelect(this.clickedTask);\n        this.taskService.showDialog('Edit Task', false);\n    }\n\n    onCheckboxChange(event: any, task: Task) {\n        event.originalEvent.stopPropagation();\n        task.completed = event.checked;\n        this.taskService.markAsCompleted(task);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}