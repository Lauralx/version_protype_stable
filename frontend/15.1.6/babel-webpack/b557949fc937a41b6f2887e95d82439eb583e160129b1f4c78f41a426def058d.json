{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.dialogConfig = {\n      visible: false,\n      header: '',\n      newTask: false\n    };\n    this.tasks = [];\n    this.taskSource = new BehaviorSubject(this.tasks);\n    this.selectedTask = new Subject();\n    this.dialogSource = new BehaviorSubject(this.dialogConfig);\n    this.taskSource$ = this.taskSource.asObservable();\n    this.selectedTask$ = this.selectedTask.asObservable();\n    this.dialogSource$ = this.dialogSource.asObservable();\n    this.http.get('assets/demo/data/tasks.json').toPromise().then(res => res.data).then(data => {\n      this.tasks = data;\n      this.taskSource.next(data);\n    });\n  }\n  addTask(task) {\n    if (this.tasks.includes(task)) {\n      this.tasks = this.tasks.map(t => t.id === task.id ? task : t);\n    } else {\n      this.tasks = [...this.tasks, task];\n    }\n    this.taskSource.next(this.tasks);\n  }\n  removeTask(id) {\n    this.tasks = this.tasks.filter(t => t.id !== id);\n    this.taskSource.next(this.tasks);\n  }\n  onTaskSelect(task) {\n    this.selectedTask.next(task);\n  }\n  markAsCompleted(task) {\n    this.tasks = this.tasks.map(t => t.id === task.id ? task : t);\n    this.taskSource.next(this.tasks);\n  }\n  showDialog(header, newTask) {\n    this.dialogConfig = {\n      visible: true,\n      header: header,\n      newTask: newTask\n    };\n    this.dialogSource.next(this.dialogConfig);\n  }\n  closeDialog() {\n    this.dialogConfig = {\n      visible: false\n    };\n    this.dialogSource.next(this.dialogConfig);\n  }\n}\nTaskService.ɵfac = function TaskService_Factory(t) {\n  return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n};\nTaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TaskService,\n  factory: TaskService.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,OAAO,QAAQ,MAAM;;;AAI/C,OAAM,MAAOC,WAAW;EAsBpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IApBxB,iBAAY,GAAiB;MACzBC,OAAO,EAAE,KAAK;MACdC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;KACZ;IAED,UAAK,GAAW,EAAE;IAEV,eAAU,GAAG,IAAIP,eAAe,CAAS,IAAI,CAACQ,KAAK,CAAC;IAEpD,iBAAY,GAAG,IAAIP,OAAO,EAAQ;IAElC,iBAAY,GAAG,IAAID,eAAe,CAAe,IAAI,CAACS,YAAY,CAAC;IAE3E,gBAAW,GAAG,IAAI,CAACC,UAAU,CAACC,YAAY,EAAE;IAE5C,kBAAa,GAAG,IAAI,CAACC,YAAY,CAACD,YAAY,EAAE;IAEhD,kBAAa,GAAG,IAAI,CAACE,YAAY,CAACF,YAAY,EAAE;IAG5C,IAAI,CAACP,IAAI,CAACU,GAAG,CAAM,6BAA6B,CAAC,CAC5CC,SAAS,EAAE,CACXC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAc,CAAC,CAC/BF,IAAI,CAACE,IAAI,IAAG;MACT,IAAI,CAACV,KAAK,GAAGU,IAAI;MACjB,IAAI,CAACR,UAAU,CAACS,IAAI,CAACD,IAAI,CAAC;IAC9B,CAAC,CAAC;EACV;EAEAE,OAAO,CAACC,IAAU;IACd,IAAI,IAAI,CAACb,KAAK,CAACc,QAAQ,CAACD,IAAI,CAAC,EAAE;MAC3B,IAAI,CAACb,KAAK,GAAG,IAAI,CAACA,KAAK,CAACe,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE,GAAGJ,IAAI,GAAGG,CAAC,CAAC;KAChE,MACI;MACD,IAAI,CAAChB,KAAK,GAAG,CAAC,GAAG,IAAI,CAACA,KAAK,EAAEa,IAAI,CAAC;;IAGtC,IAAI,CAACX,UAAU,CAACS,IAAI,CAAC,IAAI,CAACX,KAAK,CAAC;EACpC;EAEAkB,UAAU,CAACD,EAAU;IACjB,IAAI,CAACjB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACmB,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC;IAChD,IAAI,CAACf,UAAU,CAACS,IAAI,CAAC,IAAI,CAACX,KAAK,CAAC;EACpC;EAEAoB,YAAY,CAACP,IAAU;IACnB,IAAI,CAACT,YAAY,CAACO,IAAI,CAACE,IAAI,CAAC;EAChC;EAEAQ,eAAe,CAACR,IAAU;IACtB,IAAI,CAACb,KAAK,GAAG,IAAI,CAACA,KAAK,CAACe,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE,GAAGJ,IAAI,GAAGG,CAAC,CAAC;IAC7D,IAAI,CAACd,UAAU,CAACS,IAAI,CAAC,IAAI,CAACX,KAAK,CAAC;EACpC;EAEAsB,UAAU,CAACxB,MAAc,EAAEC,OAAgB;IACvC,IAAI,CAACE,YAAY,GAAG;MAChBJ,OAAO,EAAE,IAAI;MACbC,MAAM,EAAEA,MAAM;MACdC,OAAO,EAAEA;KACZ;IAED,IAAI,CAACM,YAAY,CAACM,IAAI,CAAC,IAAI,CAACV,YAAY,CAAC;EAC7C;EAEAsB,WAAW;IACP,IAAI,CAACtB,YAAY,GAAG;MAChBJ,OAAO,EAAE;KACZ;IAED,IAAI,CAACQ,YAAY,CAACM,IAAI,CAAC,IAAI,CAACV,YAAY,CAAC;EAC7C;;;mBAzESP,WAAW;AAAA;;SAAXA,WAAW;EAAA8B,SAAX9B,WAAW;AAAA","names":["BehaviorSubject","Subject","TaskService","constructor","http","visible","header","newTask","tasks","dialogConfig","taskSource","asObservable","selectedTask","dialogSource","get","toPromise","then","res","data","next","addTask","task","includes","map","t","id","removeTask","filter","onTaskSelect","markAsCompleted","showDialog","closeDialog","factory"],"sourceRoot":"","sources":["C:\\Users\\UsuarioPrincipal\\Downloads\\verona-ng-15.0.1\\src\\app\\demo\\components\\apps\\tasklist\\service\\task.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { DialogConfig, Task } from 'src/app/demo/api/task';\n\n@Injectable()\nexport class TaskService {\n\n    dialogConfig: DialogConfig = {\n        visible: false,\n        header: '',\n        newTask: false\n    };\n\n    tasks: Task[] = [];\n\n    private taskSource = new BehaviorSubject<Task[]>(this.tasks);\n\n    private selectedTask = new Subject<Task>();\n\n    private dialogSource = new BehaviorSubject<DialogConfig>(this.dialogConfig);\n\n    taskSource$ = this.taskSource.asObservable();\n\n    selectedTask$ = this.selectedTask.asObservable();\n\n    dialogSource$ = this.dialogSource.asObservable();\n\n    constructor(private http: HttpClient) {\n        this.http.get<any>('assets/demo/data/tasks.json')\n            .toPromise()\n            .then(res => res.data as Task[])\n            .then(data => {\n                this.tasks = data;\n                this.taskSource.next(data);\n            });\n    }\n\n    addTask(task: Task) {\n        if (this.tasks.includes(task)) {\n            this.tasks = this.tasks.map(t => t.id === task.id ? task : t);\n        }\n        else {\n            this.tasks = [...this.tasks, task];\n        }\n\n        this.taskSource.next(this.tasks);\n    }\n\n    removeTask(id: number) {\n        this.tasks = this.tasks.filter(t => t.id !== id);\n        this.taskSource.next(this.tasks);\n    }\n\n    onTaskSelect(task: Task) {\n        this.selectedTask.next(task);\n    }\n\n    markAsCompleted(task: Task) {\n        this.tasks = this.tasks.map(t => t.id === task.id ? task : t);\n        this.taskSource.next(this.tasks);\n    }\n\n    showDialog(header: string, newTask: boolean) {\n        this.dialogConfig = {\n            visible: true,\n            header: header,\n            newTask: newTask\n        };\n\n        this.dialogSource.next(this.dialogConfig);\n    }\n\n    closeDialog() {\n        this.dialogConfig = {\n            visible: false\n        }\n\n        this.dialogSource.next(this.dialogConfig);\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}