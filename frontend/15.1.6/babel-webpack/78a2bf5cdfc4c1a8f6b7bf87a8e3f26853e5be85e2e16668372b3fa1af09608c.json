{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MailService {\n  constructor(http) {\n    this.http = http;\n    this._mails = [];\n    this.mails = new BehaviorSubject(this._mails);\n    this.mails$ = this.mails.asObservable();\n    this.http.get('assets/demo/data/mail.json').toPromise().then(res => res.data).then(data => {\n      this.updateMails(data);\n    });\n  }\n  updateMails(data) {\n    this._mails = data;\n    this.mails.next(data);\n  }\n  onStar(id) {\n    const mail = this._mails.find(m => m.id === id);\n    mail && (mail['starred'] = !(mail === null || mail === void 0 ? void 0 : mail.starred));\n    this.mails.next(this._mails);\n  }\n  onArchive(id) {\n    this._mails = this._mails.map(m => m.id === id ? Object.assign(Object.assign({}, m), {\n      archived: !m.archived\n    }) : m);\n    this.mails.next(this._mails);\n  }\n  onBookmark(id) {\n    const mail = this._mails.find(m => m.id === id);\n    mail && (mail['important'] = !(mail === null || mail === void 0 ? void 0 : mail.important));\n    this.mails.next(this._mails);\n  }\n  onDelete(id) {\n    this._mails = this._mails.filter(m => m.id !== id);\n    this.mails.next(this._mails);\n  }\n  onDeleteMultiple(mails) {\n    let idArray = mails.map(m => Number(m.id));\n    this._mails = this._mails.filter(m => idArray.indexOf(m.id) == -1);\n    this.mails.next(this._mails);\n  }\n  onArchiveMultiple(mails) {\n    let idArray = mails.map(m => m.id);\n    for (let i = 0; i < this._mails.length; i++) {\n      let mail = this._mails[i];\n      if (idArray.indexOf(mail.id) !== -1) {\n        mail.archived = true;\n        this._mails[i] = mail;\n      }\n    }\n    this.mails.next(this._mails);\n  }\n  onSpamMultiple(mails) {\n    let idArray = mails.map(m => m.id);\n    for (let i = 0; i < this._mails.length; i++) {\n      let mail = this._mails[i];\n      if (idArray.indexOf(mail.id) !== -1) {\n        mail = Object.assign(Object.assign({}, mail), {\n          spam: true,\n          important: false,\n          starred: false,\n          archived: false\n        });\n        this._mails[i] = mail;\n      }\n    }\n    this.mails.next(this._mails);\n  }\n  onTrash(id) {\n    this._mails = this._mails.map(m => m.id === id ? Object.assign(Object.assign({}, m), {\n      trash: true\n    }) : m);\n    this.mails.next(this._mails);\n  }\n  onSend(mail) {\n    if (!mail.id) {\n      mail.id = this.generateId();\n    }\n    if (!mail.title) {\n      mail.title = 'Untitled';\n    }\n    mail.date = this.generateDate();\n    this._mails.push(mail);\n    this.mails.next(this._mails);\n  }\n  generateId() {\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < 5; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  generateDate() {\n    return new Date().toDateString().split(' ').slice(1, 4).join(' ');\n  }\n}\nMailService.ɵfac = function MailService_Factory(t) {\n  return new (t || MailService)(i0.ɵɵinject(i1.HttpClient));\n};\nMailService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MailService,\n  factory: MailService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","MailService","constructor","http","_mails","mails","asObservable","get","toPromise","then","res","data","updateMails","next","onStar","id","mail","find","m","starred","onArchive","map","Object","archived","onBookmark","important","onDelete","filter","onDeleteMultiple","idArray","Number","indexOf","onArchiveMultiple","i","length","onSpamMultiple","spam","onTrash","trash","onSend","generateId","title","date","generateDate","push","text","possible","charAt","Math","floor","random","Date","toDateString","split","slice","join","factory"],"sourceRoot":"","sources":["C:\\Users\\UsuarioPrincipal\\Downloads\\frontend_verona-ng-15.0.1\\src\\app\\demo\\components\\apps\\mail\\service\\mail.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Mail } from 'src/app/demo/api/mail';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MailService {\n\n    private _mails: Mail[] = [];\n\n    private mails = new BehaviorSubject<Mail[]>(this._mails);\n\n    mails$ = this.mails.asObservable();\n\n    constructor(private http: HttpClient) {\n        this.http.get<any>('assets/demo/data/mail.json')\n            .toPromise()\n            .then(res => res.data as Mail[])\n            .then(data => {\n                this.updateMails(data);\n            });\n    }\n\n    updateMails(data: Mail[]) {\n        this._mails = data;\n        this.mails.next(data);\n    }\n\n    onStar(id: number) {\n        const mail = this._mails.find(m => m.id === id)\n        mail && (mail['starred'] = !mail?.starred)\n        this.mails.next(this._mails);\n    }\n\n    onArchive(id: number) {\n        this._mails = this._mails.map(m => m.id === id ? ({ ...m, archived: !m.archived }) : m);\n        this.mails.next(this._mails);\n    }\n\n    onBookmark(id: number) {\n        const mail = this._mails.find(m => m.id === id)\n        mail && (mail['important'] = !mail?.important)\n        this.mails.next(this._mails);\n    }\n\n    onDelete(id: number) {\n        this._mails = this._mails.filter(m => m.id !== id);\n        this.mails.next(this._mails);\n    }\n\n    onDeleteMultiple(mails: Mail[]) {\n        let idArray = mails.map(m => Number(m.id));\n        this._mails = this._mails.filter(m => idArray.indexOf(m.id) == -1);\n        this.mails.next(this._mails);\n    }\n\n    onArchiveMultiple(mails: Mail[]) {\n        let idArray = mails.map(m => m.id);\n\n        for (let i = 0; i < this._mails.length; i++) {\n            let mail = this._mails[i];\n\n            if (idArray.indexOf(mail.id) !== -1) {\n                mail.archived = true;\n                this._mails[i] = mail;\n            }\n        }\n\n        this.mails.next(this._mails);\n    }\n\n    onSpamMultiple(mails: Mail[]) {\n        let idArray = mails.map(m => m.id);\n\n        for (let i = 0; i < this._mails.length; i++) {\n            let mail = this._mails[i];\n\n            if (idArray.indexOf(mail.id) !== -1) {\n                mail = { ...mail, spam: true, important: false, starred: false, archived: false };\n                this._mails[i] = mail;\n            }\n        }\n\n        this.mails.next(this._mails);\n    }\n\n    onTrash(id: number) {\n        this._mails = this._mails.map(m => m.id === id ? ({ ...m, trash: true }) : m);\n        this.mails.next(this._mails);\n    }\n\n    onSend(mail: Mail) {\n        if (!mail.id) {\n            mail.id = this.generateId();\n        }\n        if (!mail.title) {\n            mail.title = 'Untitled';\n        }\n\n        mail.date = this.generateDate();\n        this._mails.push(mail);\n        this.mails.next(this._mails);\n    }\n\n\n    generateId() {\n        let text = \"\";\n        let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n        for (var i = 0; i < 5; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n\n        return text;\n    }\n\n    generateDate() {\n        return new Date().toDateString().split(' ').slice(1, 4).join(' ');\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}