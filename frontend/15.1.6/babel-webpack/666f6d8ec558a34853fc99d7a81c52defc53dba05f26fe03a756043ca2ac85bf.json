{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class KanbanService {\n  constructor(http) {\n    this.http = http;\n    this._lists = [];\n    this.selectedCard = new Subject();\n    this.selectedListId = new Subject();\n    this.lists = new BehaviorSubject(this._lists);\n    this.listNames = new Subject();\n    this.lists$ = this.lists.asObservable();\n    this.selectedCard$ = this.selectedCard.asObservable();\n    this.selectedListId$ = this.selectedListId.asObservable();\n    this.listNames$ = this.listNames.asObservable();\n    this.http.get('assets/demo/data/kanban.json').toPromise().then(res => res.data).then(data => {\n      this.updateLists(data);\n    });\n  }\n  updateLists(data) {\n    this._lists = data;\n    let small = data.map(l => ({\n      listId: l.listId,\n      title: l.title\n    }));\n    this.listNames.next(small);\n    this.lists.next(data);\n  }\n  addList() {\n    const listId = this.generateId();\n    const title = \"Untitled List\";\n    const newList = {\n      listId: listId,\n      title: title,\n      cards: []\n    };\n    this._lists.push(newList);\n    this.lists.next(this._lists);\n  }\n  addCard(listId) {\n    const cardId = this.generateId();\n    const title = \"Untitled card\";\n    const newCard = {\n      id: cardId,\n      title: title,\n      description: '',\n      progress: '',\n      assignees: [],\n      attachments: 0,\n      comments: [],\n      startDate: '',\n      dueDate: '',\n      completed: false,\n      taskList: {\n        title: 'Untitled Task List',\n        tasks: []\n      }\n    };\n    let lists = [];\n    lists = this._lists.map(l => l.listId === listId ? Object.assign(Object.assign({}, l), {\n      cards: [...(l.cards || []), newCard]\n    }) : l);\n    this.updateLists(lists);\n  }\n  updateCard(card, listId) {\n    let lists = this._lists.map(l => l.listId === listId ? Object.assign(Object.assign({}, l), {\n      cards: l.cards.map(c => c.id === card.id ? Object.assign({}, card) : c)\n    }) : l);\n    this.updateLists(lists);\n  }\n  deleteList(id) {\n    this._lists = this._lists.filter(l => l.listId !== id);\n    this.lists.next(this._lists);\n  }\n  copyList(list) {\n    let newId = this.generateId();\n    let newList = Object.assign(Object.assign({}, list), {\n      listId: newId\n    });\n    this._lists.push(newList);\n    this.lists.next(this._lists);\n  }\n  deleteCard(cardId, listId) {\n    let lists = [];\n    for (let i = 0; i < this._lists.length; i++) {\n      let list = this._lists[i];\n      if (list.listId === listId && list.cards) {\n        list.cards = list.cards.filter(c => c.id !== cardId);\n      }\n      lists.push(list);\n    }\n    this.updateLists(lists);\n  }\n  copyCard(card, listId) {\n    let lists = [];\n    for (let i = 0; i < this._lists.length; i++) {\n      let list = this._lists[i];\n      if (list.listId === listId && list.cards) {\n        let cardIndex = list.cards.indexOf(card);\n        let newId = this.generateId();\n        let newCard = Object.assign(Object.assign({}, card), {\n          id: newId\n        });\n        list.cards.splice(cardIndex, 0, newCard);\n      }\n      lists.push(list);\n    }\n    this.updateLists(lists);\n  }\n  moveCard(card, targetListId, sourceListId) {\n    if (card.id) {\n      this.deleteCard(card.id, sourceListId);\n      let lists = this._lists.map(l => l.listId === targetListId ? Object.assign(Object.assign({}, l), {\n        cards: [...(l.cards || []), card]\n      }) : l);\n      this.updateLists(lists);\n    }\n  }\n  onCardSelect(card, listId) {\n    this.selectedCard.next(card);\n    this.selectedListId.next(listId);\n  }\n  generateId() {\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < 5; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  isMobileDevice() {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent) || /(android)/i.test(navigator.userAgent);\n  }\n}\nKanbanService.ɵfac = function KanbanService_Factory(t) {\n  return new (t || KanbanService)(i0.ɵɵinject(i1.HttpClient));\n};\nKanbanService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KanbanService,\n  factory: KanbanService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","Subject","KanbanService","constructor","http","_lists","lists","asObservable","selectedCard","selectedListId","listNames","get","toPromise","then","res","data","updateLists","small","map","l","listId","title","next","addList","generateId","newList","cards","push","addCard","cardId","newCard","id","description","progress","assignees","attachments","comments","startDate","dueDate","completed","taskList","tasks","Object","updateCard","card","c","deleteList","filter","copyList","list","newId","deleteCard","i","length","copyCard","cardIndex","indexOf","splice","moveCard","targetListId","sourceListId","onCardSelect","text","possible","charAt","Math","floor","random","isMobileDevice","test","navigator","userAgent","factory"],"sourceRoot":"","sources":["C:\\Users\\UsuarioPrincipal\\Downloads\\verona-ng-15.0.1\\src\\app\\demo\\components\\apps\\kanban\\service\\kanban.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { KanbanCard, KanbanList } from 'src/app/demo/api/kanban';\n\n@Injectable()\nexport class KanbanService {\n\n    private _lists: KanbanList[] = [];\n\n    private selectedCard = new Subject<KanbanCard>();\n\n    private selectedListId = new Subject<string>();\n\n    private lists = new BehaviorSubject<KanbanList[]>(this._lists);\n\n    private listNames = new Subject<any[]>();\n\n    lists$ = this.lists.asObservable();\n\n    selectedCard$ = this.selectedCard.asObservable();\n\n    selectedListId$ = this.selectedListId.asObservable();\n\n    listNames$ = this.listNames.asObservable();\n\n    constructor(private http: HttpClient) {\n        this.http.get<any>('assets/demo/data/kanban.json')\n        .toPromise()\n        .then(res => res.data as KanbanList[])\n        .then(data => {\n            this.updateLists(data);\n        });\n    }\n\n    private updateLists(data: any[]) {\n        this._lists = data;\n        let small = data.map(l => ({listId: l.listId, title: l.title}));\n\n        this.listNames.next(small)\n        this.lists.next(data);\n    }\n\n    addList() {\n        const listId = this.generateId();\n        const title = \"Untitled List\";\n        const newList = {\n            listId: listId,\n            title: title,\n            cards:[]\n        };\n\n        this._lists.push(newList);\n        this.lists.next(this._lists);\n    }\n\n    addCard(listId: string) {\n        const cardId = this.generateId();\n        const title = \"Untitled card\";\n        const newCard = {id: cardId, title: title, description: '', progress: '', assignees: [], attachments: 0, comments: [], startDate: '', dueDate: '', completed: false, taskList: {title:'Untitled Task List', tasks: []}};\n\n        let lists = [];\n        lists = this._lists.map(l => l.listId === listId ? ({...l, cards: [...l.cards || [], newCard]}) : l);\n        this.updateLists(lists);\n    }\n\n    updateCard(card: KanbanCard, listId: string) {\n        let lists = this._lists.map(l => l.listId === listId ? ({...l, cards: l.cards.map(c => c.id === card.id ? {...card} : c)}) : l);\n        this.updateLists(lists);\n    }\n\n    deleteList(id: string) {\n        this._lists = this._lists.filter(l => l.listId !== id);\n        this.lists.next(this._lists);\n    }\n\n    copyList(list: KanbanList) {\n        let newId = this.generateId();\n        let newList = {...list, listId: newId};\n\n        this._lists.push(newList);\n        this.lists.next(this._lists);\n    }\n\n    deleteCard(cardId: string, listId: string) {\n        let lists = [];\n\n        for (let i = 0; i < this._lists.length; i++) {\n            let list = this._lists[i];\n\n            if (list.listId === listId && list.cards) {\n                list.cards = list.cards.filter(c => c.id !== cardId);\n            }\n\n            lists.push(list);\n        }\n\n        this.updateLists(lists);\n    }\n\n    copyCard(card: KanbanCard, listId: string) {\n        let lists = [];\n\n        for (let i = 0; i < this._lists.length; i++) {\n            let list = this._lists[i];\n\n            if (list.listId === listId && list.cards) {\n                let cardIndex = list.cards.indexOf(card);\n                let newId = this.generateId();\n                let newCard = {...card, id: newId};\n                list.cards.splice(cardIndex, 0, newCard);\n            }\n\n            lists.push(list);\n        }\n\n        this.updateLists(lists);\n    }\n\n    moveCard(card: KanbanCard, targetListId: string, sourceListId: string) {\n        if (card.id) {\n            this.deleteCard(card.id, sourceListId);\n            let lists = this._lists.map(l => l.listId === targetListId ? ({...l, cards: [...l.cards || [], card]}) : l);\n            this.updateLists(lists);\n        }\n    }\n\n    onCardSelect(card: KanbanCard, listId: string) {\n        this.selectedCard.next(card);\n        this.selectedListId.next(listId);\n    }\n\n    generateId() {\n        let text = \"\";\n        let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n        for (var i = 0; i < 5; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n\n        return text;\n    }\n\n    isMobileDevice() {\n        return (/iPad|iPhone|iPod/.test(navigator.userAgent)) || (/(android)/i.test(navigator.userAgent));\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}